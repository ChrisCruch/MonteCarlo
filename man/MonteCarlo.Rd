% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/monte carlo.R
\name{MonteCarlo}
\alias{MonteCarlo}
\title{Parallized Monte Carlo simulation.}
\usage{
MonteCarlo(func, M, param.list, ncpus = 1, raw = TRUE, max.grid = 1000,
  timeNtest = FALSE, save.res = TRUE)
}
\arguments{
\item{func}{is the function to be evaluated. see details. must return a list}

\item{M}{specifies the number of monte carlo repetitions}

\item{param.list}{a list whose components are named after the parameters of func and each component is a vector containing the desired grid values for that parameter}

\item{ncpus}{number of cpus to be used. default is ncpus=1. For ncpus>1 the simulation is parallized automatically using ncpus cpu units.}

\item{raw}{specifies whether the output should be averaged over the M repetitions}

\item{max.grid}{specifies for which grid size to throw an error, if grid becomes to large.}

\item{timeNtest}{for large simulations or slow functions the required estimation time is estimated, see details. Default is timeNtest=FALSE.}

\item{save.res}{if timeNtest=TRUE and save.res=TRUE, the results of the auxillary simulation are saved to the current directory.}
}
\description{
\code{MonteCarlo} runs a Monte Carlo simulation study for a correctly specified function and the desired parameter grids. See details.
}
\details{
All input arguments have to be scalar, function has to return list of named scalars, list elements have to be unnamed scalars.
}
\examples{
test.func<-function(n,loc,scale){
 sample<-rnorm(n, loc, scale)
 stat<-sqrt(n)*mean(sample)/sd(sample)
 decision<-abs(stat)>1.96
 return(list("decision"=decision))
}

# Example without parallization
n.grid<-c(50,100,250,500)
loc.grid<-seq(0,1,0.1)
scale.grid<-1

param.list=list("n"=n.grid, "loc"=loc.grid, "scale"=scale.grid)
MonteCarlo(func=test.func, M=1000, param.list=param.list, ncpus=1, timeNtest=TRUE, save.res=FALSE)

# Modify Test function to have slow example for parallized computation

test.func2<-function(n,loc,scale){
 sample<-rnorm(n, loc, scale)
 stat<-sqrt(n)*mean(sample)/sd(sample)
 decision<-abs(stat)>1.96
 for(i in 1:(n)){for(j in 1:(n)){c(i,j)}}
 return(list("decision"=decision))
}

n.grid<-100
loc.grid<-seq(0,1,0.1)
scale.grid<-seq(1,2,1)
param.list=list("n"=n.grid, "loc"=loc.grid, "scale"=scale.grid)
MonteCarlo(func=test.func2, M=500, param.list=param.list, ncpus=2, timeNtest=FALSE)
}

